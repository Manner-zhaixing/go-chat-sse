// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	conversationFieldNames          = builder.RawFieldNames(&Conversation{})
	conversationRows                = strings.Join(conversationFieldNames, ",")
	conversationRowsExpectAutoSet   = strings.Join(stringx.Remove(conversationFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	conversationRowsWithPlaceHolder = strings.Join(stringx.Remove(conversationFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	conversationModel interface {
		Insert(ctx context.Context, data *Conversation) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Conversation, error)
		Update(ctx context.Context, data *Conversation) error
		Delete(ctx context.Context, id int64) error
	}

	defaultConversationModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Conversation struct {
		Id          int64     `db:"id"`
		UserId      int64     `db:"user_id"`      // 大会话属于用户的userid
		MessageNums int64     `db:"message_nums"` // 大会话的消息数量
		FirstTime   time.Time `db:"first_time"`   // 大会话的创建时间
		LastTime    time.Time `db:"last_time"`    // 大会话的最后一次更新时间
	}
)

func newConversationModel(conn sqlx.SqlConn) *defaultConversationModel {
	return &defaultConversationModel{
		conn:  conn,
		table: "`conversation`",
	}
}

func (m *defaultConversationModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultConversationModel) FindOne(ctx context.Context, id int64) (*Conversation, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", conversationRows, m.table)
	var resp Conversation
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultConversationModel) Insert(ctx context.Context, data *Conversation) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, conversationRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.UserId, data.MessageNums, data.FirstTime, data.LastTime)
	return ret, err
}

func (m *defaultConversationModel) Update(ctx context.Context, data *Conversation) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, conversationRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.UserId, data.MessageNums, data.FirstTime, data.LastTime, data.Id)
	return err
}

func (m *defaultConversationModel) tableName() string {
	return m.table
}
